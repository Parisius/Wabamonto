var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { Directive, ElementRef, Input, Renderer } from '@angular/core';
import { Config } from 'ionic-angular';
import { CustomIconBase } from '../custom-icon-base';
import { ElementRefClassUpdater } from '../util/ElementRefClassUpdater';
import { isTrueValue } from '../util/utils';
/**
 * Directive to display custom icons from generated icon font.
 *
 * Example usage:
 * @usage
 * ```html
 * <custom-icon set="mySet" name="myIcon"></custom-icon>
 * ```
 *
 * @author Gerrit Erpenstein
 */
var CustomIcon = (function (_super) {
    __extends(CustomIcon, _super);
    function CustomIcon(_elementRef, _renderer, config) {
        var _this = _super.call(this, config) || this;
        _this._elementRef = _elementRef;
        _this._renderer = _renderer;
        /**
         * Icon name
         */
        _this.iconName = '';
        /**
         * Icon set name
         */
        _this.iconSet = '';
        /**
         * Icon color
         */
        _this.color = '';
        /**
         * Icon in active state?
         */
        _this._isActive = true;
        _this.classUpdater = new ElementRefClassUpdater(_elementRef, _renderer);
        return _this;
    }
    Object.defineProperty(CustomIcon.prototype, "isActive", {
        get: function () {
            return this._isActive;
        },
        set: function (isActive) {
            this._isActive = isTrueValue(isActive);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Called on input parameter value changes.
     */
    CustomIcon.prototype.ngOnChanges = function (changes) {
        if (changes.hasOwnProperty('iconName')) {
            _super.prototype.updateIcon.call(this, this.iconName);
        }
        if (changes.hasOwnProperty('iconSet')) {
            _super.prototype.updateSet.call(this, this.iconSet);
        }
        if (changes.hasOwnProperty('color')) {
            _super.prototype.updateColor.call(this, this.color);
        }
        if (changes.hasOwnProperty('isActive')) {
            _super.prototype.updateActive.call(this, this.isActive);
        }
    };
    /**
     * Lifecycle hook when the directive is destroyed.
     */
    CustomIcon.prototype.ngOnDestroy = function () {
        _super.prototype.removeElementClasses.call(this);
    };
    return CustomIcon;
}(CustomIconBase));
export { CustomIcon };
CustomIcon.decorators = [
    { type: Directive, args: [{
                selector: 'custom-icon',
                host: {
                    'role': 'img'
                }
            },] },
];
/** @nocollapse */
CustomIcon.ctorParameters = function () { return [
    { type: ElementRef, },
    { type: Renderer, },
    { type: Config, },
]; };
CustomIcon.propDecorators = {
    'iconName': [{ type: Input, args: ['name',] },],
    'iconSet': [{ type: Input, args: ['set',] },],
    'color': [{ type: Input, args: ['color',] },],
    'isActive': [{ type: Input, args: ['isActive',] },],
};
//# sourceMappingURL=custom-icon.directive.js.map