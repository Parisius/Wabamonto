/**
 * Base class for custom-icon directives. Mainly responsible for setting/updating the target element's CSS class.
 *
 * @author Gerrit Erpenstein
 */
var CustomIconBase = (function () {
    function CustomIconBase(config) {
        var _this = this;
        /**
         * Stores currently set classes
         */
        this._classes = {
            set: null,
            icon: null,
            mode: null,
            color: null,
            active: null
        };
        this._classUpdaterPromise = new Promise(function (resolve) {
            _this._classUpdaterResolve = resolve;
        });
        this._mode = config.get('mode');
        this.updateMode(this._mode);
    }
    Object.defineProperty(CustomIconBase.prototype, "classUpdater", {
        /**
         * Set ClassUpdater instance.
         * Note: Setting the ClassUpdater is mandatory!
         * @param classUpdater
         */
        set: function (classUpdater) {
            this._classUpdaterResolve(classUpdater);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Update icon name.
     * @param icon
     */
    CustomIconBase.prototype.updateIcon = function (icon) {
        this._updateClass('icon', CustomIconBase.ICON_PREFIX + icon);
    };
    /**
     * Update set name.
     * @param set
     */
    CustomIconBase.prototype.updateSet = function (set) {
        this._updateClass('set', CustomIconBase.SET_PREFIX + set);
    };
    /**
     * Update platform mode.
     * @param mode md, ios or wp
     */
    CustomIconBase.prototype.updateMode = function (mode) {
        if (['md', 'ios', 'wp'].indexOf(mode) === -1) {
            throw 'CustomIcon: Mode ' + mode + ' not supported';
        }
        this._updateClass('mode', mode);
    };
    /**
     * Update icon color.
     * @param color
     */
    CustomIconBase.prototype.updateColor = function (color) {
        var classVal;
        if (color) {
            classVal = "icon-" + this._mode + "-" + color;
        }
        this._updateClass('color', classVal);
    };
    /**
     * Update icon to active/inactive.
     * @param active
     */
    CustomIconBase.prototype.updateActive = function (active) {
        var classVal;
        if (active || typeof active === 'undefined') {
            classVal = null;
        }
        else {
            classVal = 'inactive';
        }
        this._updateClass('active', classVal);
    };
    /**
     * Update class (key) to given value
     * @param key
     * @param value
     * @private
     */
    CustomIconBase.prototype._updateClass = function (key, value) {
        var _this = this;
        this._classUpdaterPromise.then(function (classUpdater) {
            if (_this._classes[key]) {
                classUpdater.removeClass(_this._classes[key]);
            }
            if (!value) {
                _this._classes[key] = null;
                return;
            }
            _this._classes[key] = value;
            classUpdater.addClass(value);
        });
    };
    /**
     * Remove all CSS class values from this element set by this class.
     */
    CustomIconBase.prototype.removeElementClasses = function () {
        var _this = this;
        this._classUpdaterPromise.then(function (classUpdater) {
            for (var key in _this._classes) {
                if (_this._classes[key]) {
                    classUpdater.removeClass(_this._classes[key]);
                    _this._classes[key] = null;
                }
            }
        });
    };
    return CustomIconBase;
}());
export { CustomIconBase };
/**
 * CSS set prefix
 */
CustomIconBase.SET_PREFIX = 'set-';
/**
 * CSS icon prefix
 */
CustomIconBase.ICON_PREFIX = 'icon-';
//# sourceMappingURL=custom-icon-base.js.map